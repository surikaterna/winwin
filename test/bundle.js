(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
require('./lib');
},{"./lib":2}],2:[function(require,module,exports){
var module = angular.module('ui.winwin', []);
require('./window');
require('./pane');
},{"./pane":3,"./window":4}],3:[function(require,module,exports){
(function (global){
var angular = (typeof window !== "undefined" ? window['angular'] : typeof global !== "undefined" ? global['angular'] : null);
var module = angular.module('ui.winwin');

var paneId = 0;

module.directive('pane', function () {
      return {
		restrict: 'E',
		require:'^window',
		replace: true,
		transclude: true,
		scope: {
			caption: '@',
			active: '=?',
			onSelect: '&select',
			onDeselect: '&deselect'
		},
		//template: '<div id="{{id}}" class="pane" draggable="true" ng-show="active"><div ng-transclude></div></div>',
		template: '<div id="{{id}}" ng-class="{active: active}"><a href draggable="true" ng-click="select()" pane-caption-transclude>{{caption}}</a></div>',
		controller: function($scope) {
		},
/*		compile: function(element, attr, transclusion) {
			return 
		},*/
		compile: function(element, attrs, transclude) {

			return function postLink(scope, element, attr, windowCtrl) {
				scope.id = 'wnd-pane' + paneId++;
				console.log('Creating pane ' + scope.id + " || " + scope.caption);
				console.log(scope);
				scope.active = false;
				windowCtrl.addPane(scope);
				scope.$watch('active', function(active) {
	          		if (active) {
			            windowCtrl.select(scope);
	    	    	}
	       		});
	       		scope.select = function() {
	       			console.log("Selected " + scope.caption);
	       			console.log(windowCtrl);
	       			scope.active = true;
	//       			windowCtrl.select(scope);
	       		}
	       		scope.remove = function() {
	       			console.log("Removing " + scope.caption);
					windowCtrl.removePane(scope);
	       		}
	       		scope.$on('$destroy', function() {
					console.log('destroying scope: ' + scope.id);
	       		});

				element.on('$destroy', function() {
					console.log('destroying element: ' + scope.id);
					console.log('destroying element: ' + element);
					scope.remove();
					scope.$destroy();
				});
				element.bind('dragstart', function() {
					console.log('dragstart');
					//event.dataTransfer.setData('application/x-lx-window-pane', JSON.stringify({pane: scope.id, browserWindow:'master'}));
					event.dataTransfer.setData('application/x-lx-window-pane', scope.id);
				});
				scope.$transcludeFn = transclude;			
			}
		}
      };
  });

module.directive('paneCaptionTransclude', function() {
  return {
    restrict: 'A',
    require: '^pane',
    link: function(scope, elm, attrs, tabCtrl) {
    	console.log("**** LINK ****");
      scope.$watch('captionElement', function updateHeadingElement(caption) {
        if (caption) {
          elm.html('');
          elm.append(caption);
        }
      });
    }
  };
});

module.directive('paneContentTransclude', function() {
  return {
    restrict: 'A',
    require: '^window',
    link: function(scope, elm, attrs) {
      console.log('content transclude');
      console.log('pane');
      console.log(attrs.paneContentTransclude);
      var pane = scope.$eval(attrs.paneContentTransclude);
      console.log(pane);
      scope.id = pane.id;
      //elm.id = pane.id + "-content";

      //Now our tab is ready to be transcluded: both the tab heading area
      //and the tab content area are loaded.  Transclude 'em both.
      pane.$transcludeFn(pane.$parent, function(contents) {
        angular.forEach(contents, function(node) {
          if (isPaneCaption(node)) {
            //Let tabHeadingTransclude know.
            pane.captionElement = node;
          } else {
            elm.append(node);
          }
        });
      });
    }
  };
  function isPaneCaption(node) {
    return node.tagName &&  (
      node.hasAttribute('pane-caption') ||
      node.hasAttribute('data-pane-caption') ||
      node.tagName.toLowerCase() === 'pane-caption' ||
      node.tagName.toLowerCase() === 'data-pane-caption'
    );
  }
});

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9wYW5lLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGFuZ3VsYXIgPSAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvd1snYW5ndWxhciddIDogdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbFsnYW5ndWxhciddIDogbnVsbCk7XHJcbnZhciBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgndWkud2lud2luJyk7XHJcblxyXG52YXIgcGFuZUlkID0gMDtcclxuXHJcbm1vZHVsZS5kaXJlY3RpdmUoJ3BhbmUnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHJldHVybiB7XHJcblx0XHRyZXN0cmljdDogJ0UnLFxyXG5cdFx0cmVxdWlyZTonXndpbmRvdycsXHJcblx0XHRyZXBsYWNlOiB0cnVlLFxyXG5cdFx0dHJhbnNjbHVkZTogdHJ1ZSxcclxuXHRcdHNjb3BlOiB7XHJcblx0XHRcdGNhcHRpb246ICdAJyxcclxuXHRcdFx0YWN0aXZlOiAnPT8nLFxyXG5cdFx0XHRvblNlbGVjdDogJyZzZWxlY3QnLFxyXG5cdFx0XHRvbkRlc2VsZWN0OiAnJmRlc2VsZWN0J1xyXG5cdFx0fSxcclxuXHRcdC8vdGVtcGxhdGU6ICc8ZGl2IGlkPVwie3tpZH19XCIgY2xhc3M9XCJwYW5lXCIgZHJhZ2dhYmxlPVwidHJ1ZVwiIG5nLXNob3c9XCJhY3RpdmVcIj48ZGl2IG5nLXRyYW5zY2x1ZGU+PC9kaXY+PC9kaXY+JyxcclxuXHRcdHRlbXBsYXRlOiAnPGRpdiBpZD1cInt7aWR9fVwiIG5nLWNsYXNzPVwie2FjdGl2ZTogYWN0aXZlfVwiPjxhIGhyZWYgZHJhZ2dhYmxlPVwidHJ1ZVwiIG5nLWNsaWNrPVwic2VsZWN0KClcIiBwYW5lLWNhcHRpb24tdHJhbnNjbHVkZT57e2NhcHRpb259fTwvYT48L2Rpdj4nLFxyXG5cdFx0Y29udHJvbGxlcjogZnVuY3Rpb24oJHNjb3BlKSB7XHJcblx0XHR9LFxyXG4vKlx0XHRjb21waWxlOiBmdW5jdGlvbihlbGVtZW50LCBhdHRyLCB0cmFuc2NsdXNpb24pIHtcclxuXHRcdFx0cmV0dXJuIFxyXG5cdFx0fSwqL1xyXG5cdFx0Y29tcGlsZTogZnVuY3Rpb24oZWxlbWVudCwgYXR0cnMsIHRyYW5zY2x1ZGUpIHtcclxuXHJcblx0XHRcdHJldHVybiBmdW5jdGlvbiBwb3N0TGluayhzY29wZSwgZWxlbWVudCwgYXR0ciwgd2luZG93Q3RybCkge1xyXG5cdFx0XHRcdHNjb3BlLmlkID0gJ3duZC1wYW5lJyArIHBhbmVJZCsrO1xyXG5cdFx0XHRcdGNvbnNvbGUubG9nKCdDcmVhdGluZyBwYW5lICcgKyBzY29wZS5pZCArIFwiIHx8IFwiICsgc2NvcGUuY2FwdGlvbik7XHJcblx0XHRcdFx0Y29uc29sZS5sb2coc2NvcGUpO1xyXG5cdFx0XHRcdHNjb3BlLmFjdGl2ZSA9IGZhbHNlO1xyXG5cdFx0XHRcdHdpbmRvd0N0cmwuYWRkUGFuZShzY29wZSk7XHJcblx0XHRcdFx0c2NvcGUuJHdhdGNoKCdhY3RpdmUnLCBmdW5jdGlvbihhY3RpdmUpIHtcclxuXHQgICAgICAgICAgXHRcdGlmIChhY3RpdmUpIHtcclxuXHRcdFx0ICAgICAgICAgICAgd2luZG93Q3RybC5zZWxlY3Qoc2NvcGUpO1xyXG5cdCAgICBcdCAgICBcdH1cclxuXHQgICAgICAgXHRcdH0pO1xyXG5cdCAgICAgICBcdFx0c2NvcGUuc2VsZWN0ID0gZnVuY3Rpb24oKSB7XHJcblx0ICAgICAgIFx0XHRcdGNvbnNvbGUubG9nKFwiU2VsZWN0ZWQgXCIgKyBzY29wZS5jYXB0aW9uKTtcclxuXHQgICAgICAgXHRcdFx0Y29uc29sZS5sb2cod2luZG93Q3RybCk7XHJcblx0ICAgICAgIFx0XHRcdHNjb3BlLmFjdGl2ZSA9IHRydWU7XHJcblx0Ly8gICAgICAgXHRcdFx0d2luZG93Q3RybC5zZWxlY3Qoc2NvcGUpO1xyXG5cdCAgICAgICBcdFx0fVxyXG5cdCAgICAgICBcdFx0c2NvcGUucmVtb3ZlID0gZnVuY3Rpb24oKSB7XHJcblx0ICAgICAgIFx0XHRcdGNvbnNvbGUubG9nKFwiUmVtb3ZpbmcgXCIgKyBzY29wZS5jYXB0aW9uKTtcclxuXHRcdFx0XHRcdHdpbmRvd0N0cmwucmVtb3ZlUGFuZShzY29wZSk7XHJcblx0ICAgICAgIFx0XHR9XHJcblx0ICAgICAgIFx0XHRzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRjb25zb2xlLmxvZygnZGVzdHJveWluZyBzY29wZTogJyArIHNjb3BlLmlkKTtcclxuXHQgICAgICAgXHRcdH0pO1xyXG5cclxuXHRcdFx0XHRlbGVtZW50Lm9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0Y29uc29sZS5sb2coJ2Rlc3Ryb3lpbmcgZWxlbWVudDogJyArIHNjb3BlLmlkKTtcclxuXHRcdFx0XHRcdGNvbnNvbGUubG9nKCdkZXN0cm95aW5nIGVsZW1lbnQ6ICcgKyBlbGVtZW50KTtcclxuXHRcdFx0XHRcdHNjb3BlLnJlbW92ZSgpO1xyXG5cdFx0XHRcdFx0c2NvcGUuJGRlc3Ryb3koKTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0XHRlbGVtZW50LmJpbmQoJ2RyYWdzdGFydCcsIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0Y29uc29sZS5sb2coJ2RyYWdzdGFydCcpO1xyXG5cdFx0XHRcdFx0Ly9ldmVudC5kYXRhVHJhbnNmZXIuc2V0RGF0YSgnYXBwbGljYXRpb24veC1seC13aW5kb3ctcGFuZScsIEpTT04uc3RyaW5naWZ5KHtwYW5lOiBzY29wZS5pZCwgYnJvd3NlcldpbmRvdzonbWFzdGVyJ30pKTtcclxuXHRcdFx0XHRcdGV2ZW50LmRhdGFUcmFuc2Zlci5zZXREYXRhKCdhcHBsaWNhdGlvbi94LWx4LXdpbmRvdy1wYW5lJywgc2NvcGUuaWQpO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHRcdHNjb3BlLiR0cmFuc2NsdWRlRm4gPSB0cmFuc2NsdWRlO1x0XHRcdFxyXG5cdFx0XHR9XHJcblx0XHR9XHJcbiAgICAgIH07XHJcbiAgfSk7XHJcblxyXG5tb2R1bGUuZGlyZWN0aXZlKCdwYW5lQ2FwdGlvblRyYW5zY2x1ZGUnLCBmdW5jdGlvbigpIHtcclxuICByZXR1cm4ge1xyXG4gICAgcmVzdHJpY3Q6ICdBJyxcclxuICAgIHJlcXVpcmU6ICdecGFuZScsXHJcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxtLCBhdHRycywgdGFiQ3RybCkge1xyXG4gICAgXHRjb25zb2xlLmxvZyhcIioqKiogTElOSyAqKioqXCIpO1xyXG4gICAgICBzY29wZS4kd2F0Y2goJ2NhcHRpb25FbGVtZW50JywgZnVuY3Rpb24gdXBkYXRlSGVhZGluZ0VsZW1lbnQoY2FwdGlvbikge1xyXG4gICAgICAgIGlmIChjYXB0aW9uKSB7XHJcbiAgICAgICAgICBlbG0uaHRtbCgnJyk7XHJcbiAgICAgICAgICBlbG0uYXBwZW5kKGNhcHRpb24pO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfTtcclxufSk7XHJcblxyXG5tb2R1bGUuZGlyZWN0aXZlKCdwYW5lQ29udGVudFRyYW5zY2x1ZGUnLCBmdW5jdGlvbigpIHtcclxuICByZXR1cm4ge1xyXG4gICAgcmVzdHJpY3Q6ICdBJyxcclxuICAgIHJlcXVpcmU6ICded2luZG93JyxcclxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbG0sIGF0dHJzKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdjb250ZW50IHRyYW5zY2x1ZGUnKTtcclxuICAgICAgY29uc29sZS5sb2coJ3BhbmUnKTtcclxuICAgICAgY29uc29sZS5sb2coYXR0cnMucGFuZUNvbnRlbnRUcmFuc2NsdWRlKTtcclxuICAgICAgdmFyIHBhbmUgPSBzY29wZS4kZXZhbChhdHRycy5wYW5lQ29udGVudFRyYW5zY2x1ZGUpO1xyXG4gICAgICBjb25zb2xlLmxvZyhwYW5lKTtcclxuICAgICAgc2NvcGUuaWQgPSBwYW5lLmlkO1xyXG4gICAgICAvL2VsbS5pZCA9IHBhbmUuaWQgKyBcIi1jb250ZW50XCI7XHJcblxyXG4gICAgICAvL05vdyBvdXIgdGFiIGlzIHJlYWR5IHRvIGJlIHRyYW5zY2x1ZGVkOiBib3RoIHRoZSB0YWIgaGVhZGluZyBhcmVhXHJcbiAgICAgIC8vYW5kIHRoZSB0YWIgY29udGVudCBhcmVhIGFyZSBsb2FkZWQuICBUcmFuc2NsdWRlICdlbSBib3RoLlxyXG4gICAgICBwYW5lLiR0cmFuc2NsdWRlRm4ocGFuZS4kcGFyZW50LCBmdW5jdGlvbihjb250ZW50cykge1xyXG4gICAgICAgIGFuZ3VsYXIuZm9yRWFjaChjb250ZW50cywgZnVuY3Rpb24obm9kZSkge1xyXG4gICAgICAgICAgaWYgKGlzUGFuZUNhcHRpb24obm9kZSkpIHtcclxuICAgICAgICAgICAgLy9MZXQgdGFiSGVhZGluZ1RyYW5zY2x1ZGUga25vdy5cclxuICAgICAgICAgICAgcGFuZS5jYXB0aW9uRWxlbWVudCA9IG5vZGU7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBlbG0uYXBwZW5kKG5vZGUpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9O1xyXG4gIGZ1bmN0aW9uIGlzUGFuZUNhcHRpb24obm9kZSkge1xyXG4gICAgcmV0dXJuIG5vZGUudGFnTmFtZSAmJiAgKFxyXG4gICAgICBub2RlLmhhc0F0dHJpYnV0ZSgncGFuZS1jYXB0aW9uJykgfHxcclxuICAgICAgbm9kZS5oYXNBdHRyaWJ1dGUoJ2RhdGEtcGFuZS1jYXB0aW9uJykgfHxcclxuICAgICAgbm9kZS50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdwYW5lLWNhcHRpb24nIHx8XHJcbiAgICAgIG5vZGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnZGF0YS1wYW5lLWNhcHRpb24nXHJcbiAgICApO1xyXG4gIH1cclxufSk7XHJcbiJdfQ==
},{}],4:[function(require,module,exports){
(function (global){
var angular = (typeof window !== "undefined" ? window['angular'] : typeof global !== "undefined" ? global['angular'] : null);
var module = angular.module('ui.winwin');

windowController.$inject = ['$scope'];

function windowController($scope) {
	var ctrl = this;
	var panes = ctrl.panes = $scope.panes = [];
	ctrl.select = function(selectedPane) {
		console.log("select " + selectedPane.id + " || " + selectedPane.caption);
		console.log(ctrl);
		angular.forEach(panes, function(pane) {
			console.log(pane);
			if(pane.active && pane !== selectedPane) {
				pane.active = false;
				pane.onDeselect();
			}
		});
		selectedPane.active = true;
		selectedPane.onSelect();
	}

	ctrl.addPane = function(pane) {
		panes.push(pane);
		if(panes.length === 1) {
			ctrl.select(pane);
		}
	}
	ctrl.removePane = function(pane) {
		console.log('REMOVE PANE' + pane.caption);
		console.log(pane);
		var index = panes.indexOf(pane);
		/*if(pane.active && panes.length > 1) {
			 var newActiveIndex = index == panes.length - 1 ? index - 1 : index + 1;
			ctrl.select(panes[newActiveIndex]);
		}*/
		panes.splice(index, 1);
		ctrl.select(panes[0]);
	}
	ctrl.createPane = function(caption, content) {
		
	}
}


module.controller('WindowController', windowController);


module.directive('window', function ($compile) {
      return {
		restrict: 'E',
		replace: true,
		transclude: true,
		require:'window',
		scope: {
			
		},
		template: '<div class="window"><div class="window-header" ui-transclude></div><div class="window-content"><div ng-repeat="pane in panes" ng-show="pane.active" pane-content-transclude="pane" id="{{id}}-content"></div></div>',
		controllerAs: 'vm',
		controller: 'WindowController',
		link:  function(scope, element, attr, windowController) {
			var self = this;

			function createPane(caption) {
					var newPane = $('<pane caption="'+caption+'"></pane>');
					var childScope = scope.$new(true);
					$compile(newPane)(childScope, undefined, {window: windowController});					
					return newPane;
			}

			scope.add = function() {
				console.log('### NEW');
					var pane = createPane('**new**');
					pane.appendTo(container);
					pane.html('test');
			};


			var splitArea = $('body').children('.splitdroparea');
			if(!splitArea.length) {
				splitArea = $('<div class="splitdroparea" style="display:none;"></div>');
				splitArea.appendTo($('body'));
				console.log("adding splitArea");
			}
			var headerContainer = element.children('.window-header');
			var container = element.children('.window-content');

			container.bind('drop', function(event) {
				console.log('drop');
				console.log(event);
				var paneId = event.originalEvent.dataTransfer.getData('application/x-lx-window-pane');
				console.log('*** Dropped Pane: ' + paneId);
	
				var area = getAreaFromEvent(event);
				var sourcePane = $('#'+ paneId);
				var sourceContentPane = $('#'+ paneId+"-content");
				console.log(sourcePane);
				var scpO = angular.element(sourcePane).scope();
				console.log(scpO);
				var scp = scpO.$$childHead;
				console.log(scp);
				var newPane = angular.element('<pane caption="test"></pane>');
				
				//newPane.empty();
				//sourceContentPane.children().appendTo(newPane);
				newPane.append(sourceContentPane.contents());
				$compile(newPane)(scope.$new(true), undefined, {window: windowController});
				newPane.appendTo(headerContainer);
				console.log(newPane);
				scpO.$destroy();
				sourcePane.remove();
				event.stopPropagation();
				event.preventDefault();
				splitArea.hide();
			});
			element.bind('dragend', function(event) {
				console.log('dragend');
				console.log(event);
				splitArea.hide();
				//successfully dropped?
				if(event.originalEvent.dataTransfer.dropEffect !== 'none') {
					console.log('dropped successfully');
				}
			});
			container.bind('dragenter', function(event) {
				for(var i=0;i<event.originalEvent.dataTransfer.types.length;i++) {
					var type = event.originalEvent.dataTransfer.types[i];
					if(type==='application/x-lx-window-pane') {
						event.stopPropagation();
						splitArea.show();
						return;
					} 
				}
			});

			container.bind('dragleave', function(event) {

			});

			container.bind('dragover', function(event) {
				var found = false;
				for(var i=0;i<event.originalEvent.dataTransfer.types.length;i++) {
					var type = event.originalEvent.dataTransfer.types[i];
					if(type==='application/x-lx-window-pane') {
						found = true;
						break;
					} 		
				}
				if(!found) {
					return;
				}
				event.preventDefault();
				event.stopPropagation();
				var target = event.currentTarget;
				var bounds = target.getBoundingClientRect();				
				var height = bounds.bottom - bounds.top;
				var width = bounds.right - bounds.left;

				var offset = container.offset();
				var area = getAreaFromEvent(event);
				switch(area) {
					case AREAS.TOP:
						splitArea.offset({top:offset.top, left:offset.left});
						splitArea.width(width);
						splitArea.height(height/2);
						break;	
					case AREAS.RIGHT:
						splitArea.offset({top:offset.top, left:offset.left+width/2});
						splitArea.width(width/2);
						splitArea.height(height);
						break;
					case AREAS.LEFT:
						splitArea.offset({top:offset.top, left:offset.left});
						splitArea.width(width/2);
						splitArea.height(height);
						break;
					case AREAS.BOTTOM:
						splitArea.offset({top:offset.top+height/2, left:offset.left});
						splitArea.width(width);
						splitArea.height(height/2);
						break;
				}
			});
		}
      };
  });

var AREAS = {
	TOP:'top', 
	LEFT:'left', 
	RIGHT:'right', 
	BOTTOM:'bottom'
}

function getAreaFromEvent(event) {
	var target = event.currentTarget;
	var bounds = target.getBoundingClientRect();				

    var posY = event.originalEvent.clientY - bounds.top;
    var posX = event.originalEvent.clientX - bounds.left;
    return getArea(bounds, posX, posY);
}


function getArea(bounds, posX, posY) {
	var height = bounds.bottom - bounds.top;
	var width = bounds.right - bounds.left;
	var pctY = posY/height;
	var pctX = posX/width;
	//calculate slopes
	var oAD = pctX/pctY>1;
	var oCB = pctX/(1-pctY)<=1;
	if(oAD) {
		if(oCB) {
			return AREAS.TOP;
		} else {
			return AREAS.RIGHT;
		}
	} else {
		if(oCB) {
			return AREAS.LEFT;
		} else {
			return AREAS.BOTTOM;
		}
	}
}
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{}],5:[function(require,module,exports){
module.exports = require('./lib');
},{"./lib":7}],6:[function(require,module,exports){
(function (global){
var angular = (typeof window !== "undefined" ? window.angular : typeof global !== "undefined" ? global.angular : null);
var boxModule = angular.module('ui.box');
require('./transclude-replace');

var _makeDirective = function(direction) {
	var _modeHorizontal = direction==='horizontal';
	return {
		restrict: 'E',
		replace: true,
		transclude: true,
		template: '<div class="splitbox"><div class="splitter"><div> </div></div><div ui-transclude-replace/></div>',
		link:  function(scope, element, attr) {
	var _isDragging = false;

	var splitter = element.children().eq(0);
	var splitterSize = attr.splitterSize || 1;
	var oneMinSize = attr.oneMinSize || 1;
	var twoMinSize = attr.twoMinSize || 1;

	var one = element.children().eq(1);
	var two = element.children().eq(2);
	element.addClass(_modeHorizontal ? 'horizontal' : 'vertical');
	splitter.addClass(_modeHorizontal ? 'horizontal' : 'vertical');
	one.addClass('splitboxbox');
	two.addClass('splitboxbox');
	
	element.bind('mousemove', function(event) {
		if(!_isDragging) {
			return;
		} else {
			var bounds = element[0].getBoundingClientRect();


			if(_modeHorizontal) {
				_tick(event.clientY);
			}
			else {
				_tick(event.clientX);
			}
		}
	});

	splitter.bind('mousedown', function(event) {
		event.preventDefault();
		_isDragging = true;
	});
	angular.element(document).bind('mouseup', function(event) {
		_isDragging = false;
	});

	function _tick(mousePos) {
		var pct = 0;
		var bounds = element[0].getBoundingClientRect();

		if(_modeHorizontal){
		    var height = bounds.bottom - bounds.top;
		    var pos = mousePos - bounds.top;
            if (pos < oneMinSize) return;
		    if (height - pos < twoMinSize) return;

			pct = pos/height*100;
	    	splitter.css('top',pct + '%');
	    	one.css('height', pct + '%');
		    two.css('top', pct + '%');			
		} else {
		    var width = bounds.right - bounds.left;
		    var pos = mousePos - bounds.left;
            if (pos < oneMinSize) return;
		    if (width - pos < twoMinSize) return;

			pct = pos/width*100;
		   splitter.css('left',pct + '%');
		    one.css('width', pct + '%');
	    	two.css('left', pct + '%');			

		}
	}

//			var firstBounds = one.getBoundingClientRect();
	var _init = function() {
		var bounds = element[0].getBoundingClientRect();		
		if(_modeHorizontal) {
			_tick((bounds.bottom - bounds.top)/2);
		} else{
			_tick((bounds.right - bounds.top)/2);
		}
	}
	_init();
}

	}
}

boxModule.directive('hbox', function() {
	return _makeDirective('horizontal');
});

boxModule.directive('vbox', function() {
	return _makeDirective('vertical');
});
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9zcGxpdGJveC9saWIvYm94LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGFuZ3VsYXIgPSAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdy5hbmd1bGFyIDogdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbC5hbmd1bGFyIDogbnVsbCk7XHJcbnZhciBib3hNb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgndWkuYm94Jyk7XHJcbnJlcXVpcmUoJy4vdHJhbnNjbHVkZS1yZXBsYWNlJyk7XHJcblxyXG52YXIgX21ha2VEaXJlY3RpdmUgPSBmdW5jdGlvbihkaXJlY3Rpb24pIHtcclxuXHR2YXIgX21vZGVIb3Jpem9udGFsID0gZGlyZWN0aW9uPT09J2hvcml6b250YWwnO1xyXG5cdHJldHVybiB7XHJcblx0XHRyZXN0cmljdDogJ0UnLFxyXG5cdFx0cmVwbGFjZTogdHJ1ZSxcclxuXHRcdHRyYW5zY2x1ZGU6IHRydWUsXHJcblx0XHR0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJzcGxpdGJveFwiPjxkaXYgY2xhc3M9XCJzcGxpdHRlclwiPjxkaXY+IDwvZGl2PjwvZGl2PjxkaXYgdWktdHJhbnNjbHVkZS1yZXBsYWNlLz48L2Rpdj4nLFxyXG5cdFx0bGluazogIGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XHJcblx0dmFyIF9pc0RyYWdnaW5nID0gZmFsc2U7XHJcblxyXG5cdHZhciBzcGxpdHRlciA9IGVsZW1lbnQuY2hpbGRyZW4oKS5lcSgwKTtcclxuXHR2YXIgc3BsaXR0ZXJTaXplID0gYXR0ci5zcGxpdHRlclNpemUgfHwgMTtcclxuXHR2YXIgb25lTWluU2l6ZSA9IGF0dHIub25lTWluU2l6ZSB8fCAxO1xyXG5cdHZhciB0d29NaW5TaXplID0gYXR0ci50d29NaW5TaXplIHx8IDE7XHJcblxyXG5cdHZhciBvbmUgPSBlbGVtZW50LmNoaWxkcmVuKCkuZXEoMSk7XHJcblx0dmFyIHR3byA9IGVsZW1lbnQuY2hpbGRyZW4oKS5lcSgyKTtcclxuXHRlbGVtZW50LmFkZENsYXNzKF9tb2RlSG9yaXpvbnRhbCA/ICdob3Jpem9udGFsJyA6ICd2ZXJ0aWNhbCcpO1xyXG5cdHNwbGl0dGVyLmFkZENsYXNzKF9tb2RlSG9yaXpvbnRhbCA/ICdob3Jpem9udGFsJyA6ICd2ZXJ0aWNhbCcpO1xyXG5cdG9uZS5hZGRDbGFzcygnc3BsaXRib3hib3gnKTtcclxuXHR0d28uYWRkQ2xhc3MoJ3NwbGl0Ym94Ym94Jyk7XHJcblx0XHJcblx0ZWxlbWVudC5iaW5kKCdtb3VzZW1vdmUnLCBmdW5jdGlvbihldmVudCkge1xyXG5cdFx0aWYoIV9pc0RyYWdnaW5nKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHZhciBib3VuZHMgPSBlbGVtZW50WzBdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG5cclxuXHJcblx0XHRcdGlmKF9tb2RlSG9yaXpvbnRhbCkge1xyXG5cdFx0XHRcdF90aWNrKGV2ZW50LmNsaWVudFkpO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2Uge1xyXG5cdFx0XHRcdF90aWNrKGV2ZW50LmNsaWVudFgpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fSk7XHJcblxyXG5cdHNwbGl0dGVyLmJpbmQoJ21vdXNlZG93bicsIGZ1bmN0aW9uKGV2ZW50KSB7XHJcblx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdFx0X2lzRHJhZ2dpbmcgPSB0cnVlO1xyXG5cdH0pO1xyXG5cdGFuZ3VsYXIuZWxlbWVudChkb2N1bWVudCkuYmluZCgnbW91c2V1cCcsIGZ1bmN0aW9uKGV2ZW50KSB7XHJcblx0XHRfaXNEcmFnZ2luZyA9IGZhbHNlO1xyXG5cdH0pO1xyXG5cclxuXHRmdW5jdGlvbiBfdGljayhtb3VzZVBvcykge1xyXG5cdFx0dmFyIHBjdCA9IDA7XHJcblx0XHR2YXIgYm91bmRzID0gZWxlbWVudFswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuXHJcblx0XHRpZihfbW9kZUhvcml6b250YWwpe1xyXG5cdFx0ICAgIHZhciBoZWlnaHQgPSBib3VuZHMuYm90dG9tIC0gYm91bmRzLnRvcDtcclxuXHRcdCAgICB2YXIgcG9zID0gbW91c2VQb3MgLSBib3VuZHMudG9wO1xyXG4gICAgICAgICAgICBpZiAocG9zIDwgb25lTWluU2l6ZSkgcmV0dXJuO1xyXG5cdFx0ICAgIGlmIChoZWlnaHQgLSBwb3MgPCB0d29NaW5TaXplKSByZXR1cm47XHJcblxyXG5cdFx0XHRwY3QgPSBwb3MvaGVpZ2h0KjEwMDtcclxuXHQgICAgXHRzcGxpdHRlci5jc3MoJ3RvcCcscGN0ICsgJyUnKTtcclxuXHQgICAgXHRvbmUuY3NzKCdoZWlnaHQnLCBwY3QgKyAnJScpO1xyXG5cdFx0ICAgIHR3by5jc3MoJ3RvcCcsIHBjdCArICclJyk7XHRcdFx0XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0ICAgIHZhciB3aWR0aCA9IGJvdW5kcy5yaWdodCAtIGJvdW5kcy5sZWZ0O1xyXG5cdFx0ICAgIHZhciBwb3MgPSBtb3VzZVBvcyAtIGJvdW5kcy5sZWZ0O1xyXG4gICAgICAgICAgICBpZiAocG9zIDwgb25lTWluU2l6ZSkgcmV0dXJuO1xyXG5cdFx0ICAgIGlmICh3aWR0aCAtIHBvcyA8IHR3b01pblNpemUpIHJldHVybjtcclxuXHJcblx0XHRcdHBjdCA9IHBvcy93aWR0aCoxMDA7XHJcblx0XHQgICBzcGxpdHRlci5jc3MoJ2xlZnQnLHBjdCArICclJyk7XHJcblx0XHQgICAgb25lLmNzcygnd2lkdGgnLCBwY3QgKyAnJScpO1xyXG5cdCAgICBcdHR3by5jc3MoJ2xlZnQnLCBwY3QgKyAnJScpO1x0XHRcdFxyXG5cclxuXHRcdH1cclxuXHR9XHJcblxyXG4vL1x0XHRcdHZhciBmaXJzdEJvdW5kcyA9IG9uZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuXHR2YXIgX2luaXQgPSBmdW5jdGlvbigpIHtcclxuXHRcdHZhciBib3VuZHMgPSBlbGVtZW50WzBdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1x0XHRcclxuXHRcdGlmKF9tb2RlSG9yaXpvbnRhbCkge1xyXG5cdFx0XHRfdGljaygoYm91bmRzLmJvdHRvbSAtIGJvdW5kcy50b3ApLzIpO1xyXG5cdFx0fSBlbHNle1xyXG5cdFx0XHRfdGljaygoYm91bmRzLnJpZ2h0IC0gYm91bmRzLnRvcCkvMik7XHJcblx0XHR9XHJcblx0fVxyXG5cdF9pbml0KCk7XHJcbn1cclxuXHJcblx0fVxyXG59XHJcblxyXG5ib3hNb2R1bGUuZGlyZWN0aXZlKCdoYm94JywgZnVuY3Rpb24oKSB7XHJcblx0cmV0dXJuIF9tYWtlRGlyZWN0aXZlKCdob3Jpem9udGFsJyk7XHJcbn0pO1xyXG5cclxuYm94TW9kdWxlLmRpcmVjdGl2ZSgndmJveCcsIGZ1bmN0aW9uKCkge1xyXG5cdHJldHVybiBfbWFrZURpcmVjdGl2ZSgndmVydGljYWwnKTtcclxufSk7Il19
},{"./transclude-replace":8}],7:[function(require,module,exports){
var boxModule = angular.module('ui.box', []);

require('./box');
},{"./box":6}],8:[function(require,module,exports){
(function (global){
var angular = (typeof window !== "undefined" ? window.angular : typeof global !== "undefined" ? global.angular : null);
var boxModule = angular.module('ui.box');

boxModule.directive('uiTranscludeReplace', ['$log', function ($log) {
      return {
          terminal: true,
          restrict: 'EA',

          link: function ($scope, $element, $attr, ctrl, transclude) {
              if (!transclude) {
                  $log.error('orphan',
                             'Illegal use of uiTranscludeReplace directive in the template! ' +
                             'No parent directive that requires a transclusion found. ');
                  return;
              }
              transclude($element.scope(), function (clone) {
                  if (clone.length) {
                      $element.replaceWith(clone);
                  }
                  else {
                      $element.remove();
                  }
              });
          }
      };
  }]);
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9zcGxpdGJveC9saWIvdHJhbnNjbHVkZS1yZXBsYWNlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYW5ndWxhciA9ICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93LmFuZ3VsYXIgOiB0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsLmFuZ3VsYXIgOiBudWxsKTtcclxudmFyIGJveE1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCd1aS5ib3gnKTtcclxuXHJcbmJveE1vZHVsZS5kaXJlY3RpdmUoJ3VpVHJhbnNjbHVkZVJlcGxhY2UnLCBbJyRsb2cnLCBmdW5jdGlvbiAoJGxvZykge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgdGVybWluYWw6IHRydWUsXHJcbiAgICAgICAgICByZXN0cmljdDogJ0VBJyxcclxuXHJcbiAgICAgICAgICBsaW5rOiBmdW5jdGlvbiAoJHNjb3BlLCAkZWxlbWVudCwgJGF0dHIsIGN0cmwsIHRyYW5zY2x1ZGUpIHtcclxuICAgICAgICAgICAgICBpZiAoIXRyYW5zY2x1ZGUpIHtcclxuICAgICAgICAgICAgICAgICAgJGxvZy5lcnJvcignb3JwaGFuJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnSWxsZWdhbCB1c2Ugb2YgdWlUcmFuc2NsdWRlUmVwbGFjZSBkaXJlY3RpdmUgaW4gdGhlIHRlbXBsYXRlISAnICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnTm8gcGFyZW50IGRpcmVjdGl2ZSB0aGF0IHJlcXVpcmVzIGEgdHJhbnNjbHVzaW9uIGZvdW5kLiAnKTtcclxuICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB0cmFuc2NsdWRlKCRlbGVtZW50LnNjb3BlKCksIGZ1bmN0aW9uIChjbG9uZSkge1xyXG4gICAgICAgICAgICAgICAgICBpZiAoY2xvbmUubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAkZWxlbWVudC5yZXBsYWNlV2l0aChjbG9uZSk7XHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAkZWxlbWVudC5yZW1vdmUoKTtcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICB9O1xyXG4gIH1dKTsiXX0=
},{}],9:[function(require,module,exports){
require('splitbox');
require('..');
},{"..":1,"splitbox":5}]},{},[9])
//# sourceMappingURL=data:application/json;base64,
